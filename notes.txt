# 布尔值 True False
# and or not可以当逻辑运算符
# 空值为None，不是0
# 弱类型语言，不同类型之间可以赋值，但是后果自负，不需要申明类型
# 转义字符正常使用
# 支持Unicode
# 整数小数运算上不用考虑类型了，自己会换算，该小数小数！很好的特性
# 逻辑运算会短路
# list，我觉得是链表，允许不同类型，下标访问
listA = ['Michael','Bob',12]
listB = []
print listA[0]
print listA[-1] # 自行感受
listA.append("Sweetie")
listA.insert(0,"Paul")
listA.pop(1) # 移除并返回该元素，没有参数移除最后一个

# tuple 类似于list，但是是常量，创建后无法改变，下标访问，无法赋值
tupleA = ('Michael','Bob',12)
tupleB = (1,) # 单个元素的tuple的申明方式
# tuple如果其中一个元素是list，就可以可变！因为list可变

# if,没有结束符号，注意缩进
if flag==True:
    print("true")
elif flag==False:
    print("false")
else:
    print("else~")
print("Out of loop")
	
# for in
L = ['Ada','Bob','Candy']
for name in L:
    print("name is",name)
print("Out of loop")

# while
while x < N:
    x = x+1
print("Out of loop")

# break&continue 照常

# dict 字典，键值对，无序，key必须不可变
d = {
    'Adam':95,
    'Lisa':85
}
len(d) # length of d
if 'Adam' in d: # 判断是否在集合中
    d['Adam'] # 下标访问
# 另外一种访问方法
d.get('Adam') # 访问失败返回None
#dict和list相比占内存，查询速度快，查询时间不随尺寸增长而增长
d['NewGuy']=70 # 直接添加新元素，已有的话就替换
for a in d:
    print(a,d[a])

# set 集合，无序，不重复
set1 = set(['A','B','C']) # 遇到重复元素自动去掉
# 遍历和判断存在于dict相同
# 储存的元素必须是不变的
set1.add()
set1.remove()

# function!!
def fun1(x): # 返回多值，其实就是返回一个tuple
    return x+1,x+2
result1,result2=fun1(2)

def fun2(x,y=2): # 只有一个参数的话默认等于2
    return x+y
def fun3(*x): # 输入可变数量的参数，其实就是输入了一个tuple
    return x
# 导入包
import math
math.cos(1)

range(3) # 获得range(0,3)，相当于一个012的数组

L=[1,2,3,4]
L[0:2] #和matlab差不多诶,前闭后开
L[:] # 所有元素
L[statIndex:endIndex:2] # 每隔两个元素取出
# 切片操作也支持负数

for i in range(1,100,2): # 完成c中for形式
    print(i)

a=['A','B','C']
b=enumerate(a) # b类似[(0,'A'),(1,'B'),(2,'C')]，但是不能用索引访问
# enumerate这个函数吧对应的元素变成了索引和值组成而成的tutple
# 可以用这个函数在迭代中获取索引
# dict迭代可以得到key，要获得value的话，可以对dict.values()或dict.itervalues()迭代

dict.items() # 将dict转换为包含tuple的list

[x * x for x in range(1,11) if x%2==0] # 哇塞自行感受
[m+n for m in 'ABC' for n in '123']

'<tr><td>%s</td><td>%s</td></tr>' %(name,score) #生成字符串

# 函数定义可以放在所有位置
a=abs # 函数作为变量使用
a(-1)

#高阶函数：吧函数作为参数接受的函数
def fun4(x):
    return x*x
a=[1,2,3]
b=list(map(fun4,a)) # 将一个函数作用于list中所用的元素，返回一个新的list
# b = [1,4,9]

reduce(f,list,a) # f接受两个参数返回一个参数(有a的话，先是a和一号元素开始运算)，list中12元素调用函数，然后返回参数和3号元素调用函数，直到结束

filter(f,list) # 过滤，f接受一个参数返回True or False，所有True的元素作为list返回

sored(list,f) # 排序函数，不输入f的话默认是升序，f函数是有两个参数xy，x应该排在前面返回-1，后面返回1，相等返回0

# 函数返回函数参数，实现延迟调用，感觉不实用

# 匿名函数 lambda,没有return，然后冒号后面只有一个表达式表示return结果
map(lambda x,y:x*y,[1,2,3,4])
lambda x: -1 if x<0 else x # 匿名函数里if-else好像有点不一样

# decorator
def fun1(x):
    return x*2
def newFun1(f): # 调用newFun1(fun1)返回的函数时，会答应fun1的名字，同时执行fun1
    def fn(*args,**kw):
        print('call',f.__name__+'()')
        return f(*args,**kw)
    return fn

# 调用方式1
newFun1(3)
# 调用方式2
# 定义fun1()的时候
@newFun1
def fun1(x):
    return x
#这样得到的fun1就会自己打印名字，原用的fun1呗隐藏起来了
# 自带的装饰器
@log # 打印日志
@performance # 检测性能
@transaction # 数据库事务
@post('/register') # URL路由

# 含参的装饰器看上去好复杂的样子，要用的话去看imooc.com/code/6066

# 模块，可以放在不同的包中
# 包的文件夹底下必须有__init__.py文件，可以为空
import package.module
# 只想导入几个函数的话
from math import pow,sin,log
from logging import log as logger # 防止冲突的做法

import os
os.path.isdir()
os.path.isfile()

# Object Oriented
# 对象中的值不用事先定义
class Person:
    address = ‘Earth’ # 所有实例公用，一个改变个个改变
    # address可用Person.address访问
    def __init__(self,name,**kw):
        self.name=name
        for k,v in kw.iteritems():
            setattr(self,k,v)
p1 = Person("Vera")
p2 = Person("Sweetie",height='170')
# 内部属性用双下划线开头，但是不要用双下划线结尾，可以让外部无法访问

pass # 空语句

# 异常处理
try :
    print(a.__name)
except AttributeError:
    print 'Error'

del p1.name # 删除实例的属性
# 实例属性优先级高于类属性
# 调用类属性的时候一定要用类名去调用，不要用实例名
# 类的函数传入参数第一个都是self，但是不需要显示传入

# 动态绑定函数
import types
def fun(self):
    print(self.name)
p1.fun = types.MethodType(fun,p1,Person)

# 类方法，通过类调用而不是实例
@classmethod
def fun(cls):
    print(cls.name)

# 继承
class Student(Person):
    def __init__(self,args,other):
        super(Student,self).__init__(args)
        self.other = other

isinstance(p1,Person) # 判断类型，类型为父类类型时也会返回True

type(p1) # 返回Type对象，解释它的变量类型
dir(p1) # 返回字符串列表，包含它的所有函数和变量名
getattr(p1,'name')
setattr(p1,'age',12)

__str__() # toString
__len__()
__cmp__() # sorted(L),list中的元素必须实现__cmp__方法
__add__() # 进行+操作
__sub__()
__mul__()
__div__()
__int__() # 类型转化

## get set,set支持直接赋值，而不需要调用set函数
class Student(object):
    def __init__(self, name, score):
        self.name = name
        self.__score = score
    @property
    def score(self):
        return self.__score
    @score.setter
    def score(self, score):
        if score < 0 or score > 100:
            raise ValueError('invalid score')
        self.__score = score

## __slots__用来限制这个类产生的实例中可以添加的属性

class Person(object):

    __slots__ = ('name', 'gender')

    def __init__(self, name, gender):
        self.name = name
        self.gender = gender

## __call__个人感觉意义不大，要用自己百度
